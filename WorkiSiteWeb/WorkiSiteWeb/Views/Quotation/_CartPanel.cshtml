@model LocalisationCart

<table class="cartRows">
@foreach (var item in Model.Items)
{
    @Html.Partial(MVC.Quotation.Views._CartItem, item)
}
</table>
<p class="cartDesc italic marginb5">
</p>
<div id="cartForm">
@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.NeedNewAccount)
	<table>
        <tr>
			<td>
				<div class="editor-field">
					@Html.TextBoxFor(m => m.LastName, new { placeholder = Worki.Resources.Models.Booking.Booking.LastName })
				</div>
			</td>
		</tr>
        <tr>
			<td>
				<div class="editor-field">
					@Html.TextBoxFor(m => m.FirstName, new { placeholder = Worki.Resources.Models.Booking.Booking.FirstName })
				</div>
			</td>
		</tr>
        @if (Model.NeedNewAccount)
        {
        <tr>
			<td>
				<div class="editor-field">
					@Html.TextBoxFor(m => m.Email, new { placeholder = Worki.Resources.Models.Booking.Booking.Email })
				</div>
			</td>
		</tr>
        }
        else
        {
            @Html.HiddenFor(m => m.Email)
        }
		<tr>
			<td>
				<div class="editor-field">
					@Html.TextBoxFor(m => m.PhoneNumber, new { placeholder = Worki.Resources.Models.Booking.Booking.PhoneNumber })
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<div class="editor-field">
					@Html.TextAreaFor(m => m.Message, new { placeholder = Worki.Resources.Views.Booking.BookingString.MessageToOwner })
				</div>
			</td>
		</tr>
	</table>
    <div class="buttonStd buttonBlue linkImg">
        <a href="@Url.Action(MVC.Quotation.SendCart(null))" id="submitCart">@Worki.Resources.Views.Booking.BookingString.ValidateCart</a>
    </div>
	<div class="clear"></div>
}
</div>

<script type="text/javascript">

    var emptyText = '@Worki.Resources.Views.Booking.BookingString.CartHelpEmpty';
    var notEmptyText = '@Worki.Resources.Views.Booking.BookingString.CartHelpNotEmpty';

    var updateText = function () {
        var rows = $('.cartRows tr').length;
        if (rows > 0) {
            $('.cartDesc').html(notEmptyText);
        } else {
            $('.cartDesc').html(emptyText);
        }
    };

    updateText();

    $('.addToCart').live('click', function () {
        $.ajax({
            url: this.href,
            cache: false,
            success: function (html) {
                $('.cartRows').append(html).fadeIn();
                updateText();
            }
        });
        return false;
    });

    $('.removeFromCart').live('click', function () {
        var theItem = $(this).parents('.cartRow:first');
        $.ajax({
            url: this.href,
            cache: false,
            success: function (html) {
                theItem.remove();
                updateText();
            }
        });
        return false;
    });

    require(["@Url.VersionedContent(Links.Scripts.Utils_js)"], function () {
        var errorBuilder = new ErrorBuilder('cartForm', 'cartFormError');

        $('#submitCart').live('click', function () {
            AppAjax(
			    this.href,
			    "POST",
			    $('#cartForm form').serializeArray(),
                function (data) {
                    $('.cartRows').empty();
                    $('#cartFormError').remove();
                    updateText();
                },
                errorBuilder.ErrorFunc
		    );
            return false;
        });
    });
</script>