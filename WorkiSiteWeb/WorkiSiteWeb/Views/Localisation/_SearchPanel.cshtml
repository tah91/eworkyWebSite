@model Worki.Data.Models.SearchCriteriaFormViewModel

<h3 class="blue">@Worki.Resources.Views.Search.SearchString.RefineSearch</h3>
@using (Html.BeginForm(MVC.Localisation.ActionNames.FullSearch, MVC.Localisation.Name, FormMethod.Post, new { id = "searchform" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Criteria.NorthEastLat)
    @Html.HiddenFor(model => model.Criteria.NorthEastLng)
    @Html.HiddenFor(model => model.Criteria.SouthWestLat)
    @Html.HiddenFor(model => model.Criteria.SouthWestLng)
    @Html.HiddenFor(model => model.Criteria.SearchType)
    @Html.HiddenFor(model => model.Criteria.ResultView)
    if (Model.Criteria.SearchType == eSearchType.ePerName)
    { 
    @Html.HiddenFor(model => model.Criteria.LocalisationData.Name)
    }
	@Html.HiddenFor(model => model.Criteria.LocalisationData.Latitude)
    @Html.HiddenFor(model => model.Criteria.LocalisationData.Longitude)
    <h4 class="toogle_item toogle_trigger toogle_trigger_click active"><span class="blue">@Worki.Resources.Views.Localisation.LocalisationString.Localisation</span></h4>
    <div class="toogle_container active">
        <div class="block">
            <div class="editor-field float-left">
                @Html.TextBoxFor(model => model.Criteria.Place)
            </div>
            <div class="buttonStd buttonBlue refineSubmit linkImg float-right">
                <a href="#" id="resetPlace">@Worki.Resources.Views.Shared.SharedString.Reset</a>
            </div>
            <div class="clear"></div>
        </div>
    </div>
                    
    <h4 class="toogle_item toogle_trigger toogle_trigger_click active"><span class="blue">@Worki.Resources.Views.Localisation.LocalisationFormString.Offers</span></h4>
    <div class="toogle_container active">
        <div class="block">
            <div class="editor-field">
                @Html.DropDownListFor(m => m.Criteria.OfferData.Type, Model.Offers, new { @class = "offerSelect" })
            </div>
        </div>
	</div>

    <h4 class="toogle_item toogle_trigger toogle_trigger_click active"><span class="blue">@Worki.Resources.Views.Localisation.LocalisationFormString.Facilities</span></h4>
    <div class="toogle_container active">
        <div class="block" id="serviceSelector">
            @Html.Partial(MVC.Localisation.Views._ServicesSelector)
        </div>
    </div>
                    
    <h4 class="toogle_item toogle_trigger toogle_trigger_click active"><span class="blue">@Worki.Resources.Views.Search.SearchString.KindOfLocation</span></h4>
    <div class="toogle_container active">
        <div class="block">
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.CoworkingSpace)
                @Html.LabelFor(model => model.Criteria.CoworkingSpace)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.Telecentre)
                @Html.LabelFor(model => model.Criteria.Telecentre)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.SharedOffice)
                @Html.LabelFor(model => model.Criteria.SharedOffice)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.BuisnessCenter)
                @Html.LabelFor(model => model.Criteria.BuisnessCenter)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.SpotWifi)
                @Html.LabelFor(model => model.Criteria.SpotWifi)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.CoffeeResto)
                @Html.LabelFor(model => model.Criteria.CoffeeResto)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.Biblio)
                @Html.LabelFor(model => model.Criteria.Biblio)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.TravelerSpace)
                @Html.LabelFor(model => model.Criteria.TravelerSpace)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.WorkingHotel)
                @Html.LabelFor(model => model.Criteria.WorkingHotel)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.PrivateArea)
                @Html.LabelFor(model => model.Criteria.PrivateArea)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.PublicSpace)
                @Html.LabelFor(model => model.Criteria.PublicSpace)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.Criteria.Hotel)
                @Html.LabelFor(model => model.Criteria.Hotel)
            </div>
        </div>
    </div>

    <h4 class="toogle_item toogle_trigger toogle_trigger_click"><span class="blue">@Worki.Resources.Views.Localisation.LocalisationFormString.Services</span></h4>
    <div class="toogle_container">
        <div class="block">
            <div>
                <div id="searchOption0">
                    <div id="searchOptionToReplace">
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="clear"></div>
}

<script type="text/javascript">
    require(["@Links.Scripts.dropdown_js"], function () {
        InitDropdown("#@DropDownModel.OrderByDD");
    });

    //ajax load pending
    var hiddenClass = "visuallyhidden";
    $('.loaderBlock').addClass(hiddenClass);   // hide it initially
    jQuery.ajaxSetup({
        beforeSend: function () {
            $('.loaderBlock').removeClass(hiddenClass);
        },
        complete: function () {
            $('.loaderBlock').addClass(hiddenClass);
        },
        success: function () { }
    });

    //map initialization
    require(["@MiscHelpers.UrlConstants.jqueryui", "http://maps.google.com/maps/api/js?sensor=true&region=FR&callback=initialize", "@Links.Scripts.map_markerclusterer_js"], function () {

    });

    var bigMap = false;
    @if (Model.Criteria.ResultView == eResultView.Map)
    {
        @:bigMap = true;
    }

    var resultsMap = null;
    var workiGeoCoder = null;
    var newResultsPushed = false;
    function initialize() {
        require(["@Links.Scripts.map_infobox_js", "@Url.VersionedContent(Links.Scripts.WorkiMap_js)"], function () {
            resultsMap = new WorkiMap('resultsMap');
            var where = "@Model.Criteria.Place";
            resultsMap.LoadSearchMap(where, !bigMap);

            var workiAutocomplete = new WorkiAutoComplete('#Criteria_Place');
            workiAutocomplete.SetAutocomplete();

            workiGeoCoder = new WorkiGeocoder('#Criteria_LocalisationData_Latitude', '#Criteria_LocalisationData_Longitude', '#Criteria_Place');

            var bounds_changed = function () {
                if (resultsMap.Map != null) {
                    var bounds = resultsMap.Map.getBounds();
                    var nelat = bounds.getNorthEast().lat();
                    var nelng = bounds.getNorthEast().lng();
                    var swlat = bounds.getSouthWest().lat();
                    var swlng = bounds.getSouthWest().lng();

                    $('#Criteria_NorthEastLat').val(nelat);
                    $('#Criteria_NorthEastLng').val(nelng);
                    $('#Criteria_SouthWestLat').val(swlat);
                    $('#Criteria_SouthWestLng').val(swlng);

                    if (!newResultsPushed) {
                        $("#searchFormReset form").submit();
                    }
                }
            }

            if(bigMap){
                resultsMap.AddHandler('idle', bounds_changed);

                var askForResults = function () {
                    newResultsPushed = false;
                }
                resultsMap.AddHandler('dragend', askForResults);
                resultsMap.AddHandler('zoom_changed', askForResults);
            }

            //relaod it first time
            $("#searchFormReset form").submit();
        });
    }

    var infowindow = null;
    //fill the map
    function pushResults(place, results) {
        resultsMap.ClearMap();
        var bounds = new google.maps.LatLngBounds();

        if(!bigMap){
            resultsMap.CenterSearchResults(place);
        }

        var markerDetailPopUp = function () {
            var map = this.map;
            var marker = this;
            $.ajax({
                url: '@Url.Action(MVC.Localisation.ActionNames.MapItemSummary, MVC.Localisation.Name)',
                data: { "id": this.get("id") },
                success: function (data) {
                    if (infowindow) {
                        infowindow.close();
                    }

                    infowindow = new google.maps.InfoWindow({
                        content: data
                    });

                    infowindow.open(map, marker);
                    $('div.rateit').rateit();
                }
            });

        }

        var markerDetailPage = function () {
            var map = this.map;
            var marker = this;
            $.ajax({
                url: '@Url.Action(MVC.Localisation.ActionNames.MapItemLink, MVC.Localisation.Name)',
                data: { "id": this.get("id") },
                success: function (data) {
                    window.location.href = data;
                }
            });

        }
        for (var loc in results) {
            var markerHandler = bigMap ? markerDetailPopUp : markerDetailPage;
            resultsMap.AddMarker(results[loc].latitude, results[loc].longitude, results[loc].name, results[loc].id, bounds, markerHandler);
        }

        if (results.length >= 2 && !bigMap) {
            resultsMap.FitBoundsSearchResults(bounds);
        }

        if(bigMap){
            resultsMap.SetCluster();
        }
        newResultsPushed = true;
    }

    //fill result after ajax submit
    var refreshResults = function (data) {
        $("#searchResults").replaceWith(data.list);
        pushResults(data.place, data.localisations);
        $('div.rateit').rateit();
        $("#searchSelectorContainer").replaceWith(data.order);
        $(".titleDivContainer h1").html(data.title);
        $('.loaderBlock').addClass(hiddenClass);
    };

    var goToTop = function () {
        $('html, body').animate({ scrollTop: 0 }, 0);
    }

    //load results via link
    $(".pager a, #orderByDistance, #orderByRating").live('click', function () {
        goToTop.apply();
        $.ajax({
            url: this.href,
            success: refreshResults
        });
        return false;
    });

    //ajax reload when action on form
    $('#searchFormReset input:checkbox, #serviceSelector a').live('click', function () {
        $("#searchFormReset form").submit();
    });

    $('#searchFormReset select').live('change', function () {
        $("#searchFormReset form").submit();
    });

    var ajaxSubmit = true;
    //result view changed
    $('#resultByMap').click(function () {
        $('#Criteria_ResultView').val('@eResultView.Map');
        ajaxSubmit = false;
        $("#searchFormReset form").submit();
    });

    $('#resultByList').click(function () {
        $('#Criteria_ResultView').val('@eResultView.List');
        ajaxSubmit = false;
        $("#searchFormReset form").submit();
    });

    //submit handler
    require(["@Url.VersionedContent(Links.Scripts.Utils_js)", "@Url.VersionedContent(Links.Scripts.WorkiMap_js)"], function () {
        var errorBuilder = new ErrorBuilder('searchFormReset', 'searchFormError');
        var submitData = function () {
            AppAjax(
			    '@Url.Action(MVC.Localisation.AjaxFullSearch(null))',
			    "POST",
			    $('#searchFormReset form').serializeArray(),
                refreshResults,
                errorBuilder.ErrorFunc
		    );
        }

        $("#searchFormReset form").submit(function (evt) {
            if(ajaxSubmit){
                goToTop.apply();

                submitData();
                return false;
            }
        });

        $('#Criteria_Place').blur(function (evt) {
            workiGeoCoder.SearchHandler(evt, function () {
                $('#Criteria_NorthEastLat').val(0);
                $('#Criteria_NorthEastLng').val(0);
                $('#Criteria_SouthWestLat').val(0);
                $('#Criteria_SouthWestLng').val(0);
                submitData();
                resultsMap.CenterSearchResults($('#Criteria_Place').val());
            });
        });
    });

    //keep search panel visible 
    var offset = $('#resultSearchBlock').offset();
    var width = $('#resultSearchBlock').width();

    $(window).scroll(function () {
        var searchBlock = $('#resultSearchBlock');
        var container = $('#globalContainer');
        var y = $(window).scrollTop();
        var yo = offset.top;
        var searchBottom = y + searchBlock.outerHeight();
        var containerBottom = yo + container.outerHeight();
        if (y < yo) {
            searchBlock.removeClass('fixed').removeClass('newbottom');
        }
        else if (y > yo && y + searchBlock.outerHeight() < yo + container.outerHeight()) {
            searchBlock.removeClass('newbottom').addClass('fixed').width(width);
        }
        else if (container.outerHeight() - searchBlock.outerHeight() > 30) {
            searchBlock.removeClass('fixed').addClass('newbottom');
        }
    });
</script>