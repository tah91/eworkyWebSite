@model Worki.Data.Models.SearchCriteriaFormViewModel

@section HeadContent
{
    <title>@Html.WorkiTitle(Worki.Resources.Views.Search.SearchString.SearchResult)</title>
    <link href="@Url.Content(Links.Content.Search_css)" rel="stylesheet" type="text/css" />
    <link href="@Url.Content(Links.Content.rateit_css)" rel="stylesheet" type="text/css" />
    <link href="@Url.Content(Links.Content.jquery_ui_1_8_12_custom_css) " rel="stylesheet" type="text/css"/>
}				

<div class="">
    @Worki.Resources.Views.Search.SearchString.Search <span class="blue bold">@Localisation.GetOfferType(Model.Criteria.OfferData.Type)</span> @Worki.Resources.Views.Mobile.MobileString.Near <span class="blue bold">@Model.Criteria.Place</span> @Model.Results.Count @Worki.Resources.Views.Search.SearchString.PlaceFound
</div>

<div class="clear">
</div>

<div class="detailContent">
    <div class="blockContainer">
		<div class="indexTabs">
			<ul class="tabs">
                <li id="mapTabLi"><a href="#mapTab" class="bold">@Worki.Resources.Views.Mobile.MobileString.Map</a></li>
                <li id="listTabLi"><a href="#listTab" class="bold">@Worki.Resources.Views.Mobile.MobileString.List</a></li>
            </ul>
			<div class="tab_container">
				<div id="mapTab" class="tab_content">
                	<div id="currentLoc">
					</div>
					<div class="contentBlock">
						<div id="mobileMap" style="height:220px">
						</div>
					</div>
				</div>
				<div id="listTab" class="tab_content visuallyhidden">
				    @for (int i = 0; i < Model.PageResults.Count; ++i)
					{ 
						var index = Model.PagingInfo.GlobalIndex(i);
						@Html.Partial(MVC.Mobile.Localisation.Views._SearchResultSummary, Model.GetSingleResult(index))
					}
					<div class="pager">
						@{
							var rvd = WebHelper.GetRVD(this);
						}
						@Html.PageLinks(Model.PagingInfo, x => { rvd["page"] = x; return Url.Action(MVC.Localisation.ActionNames.FullSearchResult, rvd); })
					</div>
				</div>
			</div>
		</div>

    </div>

	<div class="clear">
    </div>
</div>

@section ScriptContent
{
    <script type="text/javascript">
    	require(["@Url.VersionedContent(Links.Scripts.jquery_rateit_js)"]);

    	require(["@Url.VersionedContent(Links.Scripts.tabs_js)"], function () {
    		InitTab(".indexTabs");
//			var page = @Request.QueryString["page"].ToString();
//			if(page>1){
//				$('#listTabLi').click();
//			}
    	});

		require(["@MiscHelpers.UrlConstants.jqueryui", "http://maps.google.com/maps/api/js?sensor=true&region=FR&callback=initialize"], function () {

        });

		var resultsMap = null;
		var where = "@Model.Criteria.Place";
		var bounds = null;
        function initialize() {
            require(["@Url.VersionedContent(Links.Scripts.WorkiMap_js)"], function () {
                resultsMap = new WorkiMap('mobileMap');
                resultsMap.LoadSearchMap(where);
                bounds = new google.maps.LatLngBounds();
				var extendCount = 0;
				var extendMax = 7;
				var addedCount = 0;
				var addedMax = 50;
				function addMarker(latitude, longitude, name, localisationId)
				{
					if(addedCount++>addedMax){
						return;
					}
					var handler = function () {
						$.ajax({
							url: "@Url.Action(MVC.Mobile.Localisation.ActionNames.LocalisationDescription, MVC.Mobile.Localisation.Name)",
							data: { "id": localisationId },
							success: function (data) {
								$("#currentLoc").html(data);
							}
						});
					}
                    var LL = new google.maps.LatLng(latitude,longitude);
                    resultsMap.LoadPin(LL, name, null, null, handler);
					extendCount++;
					if(extendCount < extendMax){
						bounds.extend(LL);
					}
				}

                @foreach (var localisation in Model.Results)
                {
					@:addMarker(@localisation.Latitude, @localisation.Longitude, "@Html.Raw(localisation.Name)", @localisation.ID);
                }
                @if (Model.Results.Count >= 2)
                {
                    <text>
                    resultsMap.FitBoundsSearchResults(bounds);
                    </text>
                }
            });   
        }
    </script>
}
